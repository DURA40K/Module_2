# –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞

import json
from datetime import datetime
from .settings import RESULTS_FILE, DATE_FORMAT, GAME_LEVELS_CONVERT, clear


def save_result(name, rounds, score):
    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ —Ñ–∞–π–ª
    result = {
        "–î–∞—Ç–∞": datetime.now().strftime(DATE_FORMAT),
        "–ò–≥—Ä–æ–∫": name,
        "–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã": GAME_LEVELS_CONVERT.get(rounds, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"),
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤": rounds,
        "–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç": score
    }
    
    results = []
    try:
        with open(RESULTS_FILE, 'r', encoding='utf-8') as file:
            results = json.load(file)
    except (json.JSONDecodeError, FileNotFoundError):
        results = []
    
    results.append(result)
    
    try:
        with open(RESULTS_FILE, 'w', encoding='utf-8') as file:
            json.dump(results, file, ensure_ascii=False, indent=2)
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {RESULTS_FILE}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")


def get_results():
    # –ß–∏—Ç–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    clear()
    try:
        with open(RESULTS_FILE, 'r', encoding='utf-8') as file:
            results = json.load(file)
    except FileNotFoundError:
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä –ø–æ–∫–∞ –Ω–µ—Ç.")
        print("–°—ã–≥—Ä–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        return
    except json.JSONDecodeError:
        print("\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        return
    
    if not results:
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä –ø–æ–∫–∞ –Ω–µ—Ç.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        return
        
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    results.sort(key=lambda x: x.get('–î–∞—Ç–∞', ''), reverse=True)
    
    page = 0
    per_page = 8  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 8 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    total_pages = calculate_total_pages(len(results), per_page)
    
    while True:
        display_page(results, page, per_page, total_pages)
        show_statistics(results)
        action = get_navigation_choice(page, total_pages)
        
        if action == "previous":
            page -= 1
        elif action == "next":
            page += 1
        elif action == "exit":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


def calculate_total_pages(total_results, per_page):
    # –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    return (total_results + per_page - 1) // per_page


def display_result(result, index):
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    score = result.get('–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç', 0)
    score_text = f"+{score}" if score > 0 else str(score)
    status = "üèÜ" if score > 0 else "üòû" if score < 0 else "ü§ù"
    
    date = result.get('–î–∞—Ç–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]
    player = result.get('–ò–≥—Ä–æ–∫', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:15]
    level = result.get('–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:6]
    
    print(f"{index:2}. {date} | {player:15} | {level:6} | {score_text:4} {status}")


def display_page(results, page, per_page, total_pages):
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    clear()
    start = page * per_page
    end = start + per_page
    current_results = results[start:end]
    
    print("\n" + "="*70)
    print("                     –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ì–†")
    print("="*70)
    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã {start + 1}-{min(end, len(results))} –∏–∑ {len(results)}")
    print("-" * 70)
    print("‚Ññ   –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è     | –ò–≥—Ä–æ–∫           | –£—Ä–æ–≤–µ–Ω—å | –°—á–µ—Ç")
    print("-" * 70)
    
    for i, result in enumerate(current_results, start + 1):
        display_result(result, i)


def get_navigation_choice(page, total_pages):
    # –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
    options = []
    if page > 0:
        options.append("(1) –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    if page < total_pages - 1:
        options.append(f"({2 if page > 0 else 1}) –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    options.append(f"({len(options) + 1}) –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
    
    print("\n–ù–∞–≤–∏–≥–∞—Ü–∏—è:")
    for option in options:
        print(option)
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
    
    if page > 0 and choice == '1':
        return "previous"
    elif page < total_pages - 1 and choice == ('2' if page > 0 else '1'):
        return "next"
    elif choice == str(len(options)):
        return "exit"
    else:
        return "invalid"


def show_statistics(results):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    wins = len([r for r in results if r.get('–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç', 0) > 0])
    losses = len([r for r in results if r.get('–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç', 0) < 0])
    draws = len([r for r in results if r.get('–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç', 0) == 0])
    
    win_rate = (wins / len(results)) * 100 if len(results) > 0 else 0
    
    print("-" * 70)
    print(f"–í—Å–µ–≥–æ: {len(results)} | –ü–æ–±–µ–¥: {wins} | –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses} | –ù–∏—á—å–∏—Ö: {draws} | –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%")
    print("="*70)
